<html><head>
<style>
[cbc] {
	white-space : nowrap ;
	margin-top : 3px;
	margin-bottom : 3px ;
	font-weight : normal ;
	}
  
[cbc]+* {
	max-height: 0px;
	overflow: hidden;
	transition: max-height 0.6s ease-out;
	background-color : #E0E0E0;
	}

[cbc]>span {
	display : inline-block ;
	width : 20px ;
	line-height : 100% ;
	background-image : url(orange-plus-0.svg) ;
	background-repeat : no-repeat ;
	background-size : contain ;
	background-position : center ;
	margin-right : 10px ;
	}
	
[cbc][expand]>span {
	background-image : url(orange-minus-0.svg) ;
	}

div.toolbar {
	position : fixed;
	top : 10px ;
	left : 10px ;
	}
</style>
</head><body>
<h1 cbc style="margin-top:40px;">Click on this to expand/collapse the content block</h1><div><p>Content</p></div>
<h2 cbc>Click on this to expand/collapse the content block</h2><div><p>Content</p></div>
<h3 cbc>Click on this to expand/collapse the content block</h3><div>content</div>
<h4 cbc>Click on this to expand/collapse the content block</h4><div><p>Content</p></div>
<h5 cbc>Click on this to expand/collapse the content block</h5><div><p>Content</p></div>
<h6 cbc>Click on this to expand/collapse the content block</h6><div><p>Content</p></div>

<script>
function clickEventHandler ( ) {
	if ( this.hasAttribute( "force-visible" )) this.removeAttribute( "force-visible" );
	const expanding = this.toggleAttribute( "expand" );
	const block = this.nextElementSibling;
	if ( expanding ) block.style.maxHeight = block.scrollHeight + "px";
	else {
		block.style.maxHeight = block.scrollHeight + "px" ;
		window.requestAnimationFrame( function ( ) { 
			block.style.maxHeight = "0px" ;
			} ) ; } } 

const controllers = document.querySelectorAll( "[cbc]" );
for ( let i = 0; i < controllers.length; i++ ) {
	const controller = controllers[ i ];
	controller.insertBefore( document.createElement( "span" ), controller.firstChild ).innerHTML = "&nbsp;" ;
	if ( controller.hasAttribute( "expand" )) controller.nextElementSibling.style.maxHeight = "none" ;
	controller.addEventListener( "click", clickEventHandler );
	controller.nextElementSibling.addEventListener( "transitionend", function ( ) { 
		// Remove max height limitation if block was expanded
		if ( this.style.maxHeight !== "0px" ) this.style.maxHeight = "none" ;
		} ) ; }

function expandCollapsedBlocks ( ) {
	const controllers = document.querySelectorAll( "[cbc]:not([expand])" );
	for ( let i = 0; i < controllers.length; i++ ) {
		clickEventHandler.call( controllers[ i ] );
		} }

function collapseExpandedBlocks ( ) {
	const controllers = document.querySelectorAll( "[cbc]" );
	for ( let i = 0; i < controllers.length; i++ ) {
		const controller = controllers[ i ];
		if ( controller.hasAttribute( "expand" )) clickEventHandler.call( controller );
		} }
	
function showCollapsedContent ( ) {
	const controllers = document.querySelectorAll( "[cbc]:not([expand])" );
	for ( let i = 0; i < controllers.length; i++ ) {
		const controller = controllers[ i ];
		controller.setAttribute( "force-visible", "" );
		controller.nextElementSibling.style.maxHeight = controller.nextElementSibling.scrollHeight + "px";
		} }
	
function hideCollapsedContent ( ) {
	const controllers = document.querySelectorAll( "[cbc][force-visible]" );
	for ( let i = 0; i < controllers.length; i++ ) {
		const controller = controllers[ i ];
		controller.removeAttribute( "force-visible" );
		block = controller.nextElementSibling;
		block.style.maxHeight = block.scrollHeight + "px" ;
		window.requestAnimationFrame( function ( ) { 
			this.style.maxHeight = "0px" ;
			}.bind( block )) ; } }

</script>
<div class="toolbar">
<button onclick="expandCollapsedBlocks()">Expand All</button>
<button onclick="collapseExpandedBlocks()">Collapse All</button>
<button onclick="showCollapsedContent()">Show Collapsed Content</button>
<button onclick="hideCollapsedContent()">Hide Collapsed Content</button>
</div>
</body></html>