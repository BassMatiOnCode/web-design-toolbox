<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" content="empty.htm 2021-04-20 usp" />
<meta name="author" content="usp" />
<meta name="creation-date" content="2021-06-11" />
<meta name="editor" content="usp" />
<meta name="change-date" content="2021-06-11" />
<meta name="categories" content="Programming > Web Technology > CSS/>
<meta name="tags" content="Programming, HTML, CSS, JavaScript, Web Design, Collapsible Block" />
<link rel="stylesheet" href="/inc/page.css" />
<style>
[cbc]+* {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.2s ease-out;
}
[cbc]>span::before {
	content : "+" ;
	display : inline-block ;
	width : 15px ;
	height : 15px ;
	border : 1px solid black ;
	border-radius : 50% ;
	text-align : center;
	line-height : 15px;
	margin-right : 10px ;
	}
[cbc][collapsed] span::before {
	content : "–" ;	
	}
</style>
<title>Collapsible Blocks Version 4</title>
<meta name="description" content="This page demonstrates another way to implement collapsible blocks by controlling the CSS max-height style value." />
</head><body>

<h2>Collapsible Blocks Version 4</h2>

<p>The idea of this version of collapsible blocks is to manipulate their <tt>max-height</tt> attribute, while their <tt>scrollHeight</tt> attribute remains intact, i. e. the scroll height always contains the height of the rendered (visible) block.</p>


<h4 cbc><span></span>Click on this to expand/collapse the content block</h4><div>
  <p>Paragraph</p>
  <p>Paragraph</p>
  <p>Paragraph</p>
  <p>Paragraph</p>
  <p>Paragraph</p>
  <p>Paragraph</p>
</div>

<p>The HTML code is simple:</p>

<pre>
&lt;h4 cbc&gt;Collapsible Block Controller&lt;/h4&gt;
&lt;div&gt;
  &lt;p&gt;Content&lt;/p&gt;
&lt;/div&gt;
</pre>

<p>The <tt>div</tt> element is the collapsible block, and the <tt>h4</tt> element is the controller.</p>

<p>The <tt>max-height</tt> of the collapsible block is controlled by a click on the preceding element, which must have a <tt>cbc</tt> attribute, shorthand for "collapsible block controller". It has a click event handler attached, which manipulates the <tt>maxHeight</tt> style value of the collapsible block. A zero-length string is equivalent to "0px", which means that the block content is hidden, but has the advantage of being evaluated to a falsy value. To show the block content, the value is set to <tt>block.scrollHeight</tt> with the length unit "px" appended.</p>

<p>A <tt>transistion</tt> attribute on the <tt>max-height</tt> attribute makes transitions appear smoothly:</p>

<pre>
[cbc]+* {
	max-height : 0;
	overflow : hidden;
	transition : max-height 0.2s ease-out;
	content : " initial " ;
	}
</pre>

<p>An init script collects the elements with a <tt>cbc</tt> attribute and attaches a click event handler:</p>

<pre>
&lt;script type="module"&gt;
const controllers = document.querySelectorAll("[cbc]");
for ( let i = 0; i &lt; controllers.length; i++ ) {
  controllers[ i ].addEventListener( "click", function() {
    this.toggleAttribute("collapsed");
    const block = this.nextElementSibling;
    block.style.maxHeight = block.style.maxHeight ? "" : block.scrollHeight + "px";
    } ) }
&lt;/script&gt;
</pre>

<p>The event handler cannot be an arrow function, because the event handler depends on the <tt>this</tt> argument to be set to the DOM element which received the click.</p>

<p>The handler code determines the collapsible block element and toggles the <tt>maxHeight</tt> attribute value, depending on its content.</p>

<p>Toggling the controller's <tt>collapsed</tt> attribute is not strictly necessary, but it can be used to update the appearance of the controller element with some lines of CSS, like so: </p>

<pre>
[cbc]&gt;span::before {
	content : "+" ;
	display : inline-block ;
	width : 15px ;
	height : 15px ;
	border : 1px solid black ;
	border-radius : 50% ;
	text-align : center;
	line-height : 15px;
	margin-right : 10px ;
	}
[cbc][collapsed]&gt;span::before {
	content : "–" ;	
	}
</pre>

<p>Of course, you can use images instead of generated text, but I think you get the idea.</p>



<script type="module">
const controllers = document.querySelectorAll("[cbc]");
for ( let i = 0; i < controllers.length; i++ ) {
  controllers[ i ].addEventListener( "click", function() {
    this.toggleAttribute("collapsed");
    const block = this.nextElementSibling;
    block.style.maxHeight = block.style.maxHeight ? "" : block.scrollHeight + "px";
    } ) }
</script>

<script src="/inc/page.js" ></script>

</body>
</html>
