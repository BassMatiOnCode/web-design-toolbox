<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" content="empty.htm 2021-08-23 usp" />
<meta name="author" content="usp" />
<meta name="creation-date" content="2021-07-01" />
<meta name="editor" content="usp" />
<meta name="change-date" content="2022-02-06" />
<meta name="version" content="2" />
<meta name="categories" content="Programming > Web Development > Toolbox" />
<meta name="tags" content="collapsible, tree" />
<meta name="description" content="" />
<title>Web Design Toolbox - Collapsible Blocks 5</title>

<link rel="stylesheet" href="/inc/page.css" />

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content" cbc-default="collapsed">

<h1>Collabsible Blocks 5</h1>

<p>The January 2022 version of the collapsible blocks component is an overhaul based on recent findings.</p>

<p>The goal of this version is to combine collapsible trees based on ordered and unordered lists (OL, UL), description lists (DL) and collabsible document sections (Hn+DIV) into one core logic. These structures differ to some degree, but they also have lots in common. Firstly, there is always a collabsible block controller element which carries a <tt>cbc</tt> abttribute to store the state ("collapsed" or "expanded"). It is decorated with an icon that visually represents the state. A controller is associated with one or more collapsible blocks. A collapsible block element is controlled by its CSS <tt>height</tt>. A CSS transition rule on this attribute provides a neat animated user interface.</p>

<h2 cbc>Collapsible Chapters</h2><div>

<p>Any non-trivial document is structured into chapters or sections, often hierarchically. Headings of various degree (<tt>h2</tt>&hellip;<tt>h5</tt>) are followed by the section content. The content is wrapped in a <tt>DIV</tt> element, which also serves as collapsible block:</p>

<figcaption class="listing">A collapsible document section</figcaption>
<pre>
&lt;h2 cbc="collapsed"&gt;Section Heading&lt;/h2&gt;
&lt;div&gt;Section content goes here&lt;/div&gt;
</pre>

<p>Here is the corresponding live document <a href="collapsible-5-01.htm">collapsible-5-01.htm</a>:</p>

<figcaption class="example">Collapbsible tree structure</figcaption>
<iframe src="collapsible-5-01.htm" style="height:120px"></iframe>

<p>To make this work, we need a combination of CSS and JavaScript. Let's start with the CSS code for the controller icon:</p>

<figcaption class="listing">Pseudo-element setup</figcaption>
<pre>
[cbc]:before {
    content : "\00A0"  ;
    display : inline-block ;
    margin-left : -30px ;
    width : 30px ;
    height : auto ;
    background-size : 1em ;
    background-repeat : no-repeat ;
    background-position-x : center ;
    background-position-y : center ;
    }
</pre>

<p>The rule above generates a <tt>::before</tt> pseudo-element in front of the text, an inline-block with a width of 30 pixels. The same amount, but negative, is assigned to the <tt>margin-left</tt> property. This makes the controller icon stand out to the left while the text remains its original horizontal position. The height is set to <tt>auto</tt> and thereby follows the text size. So, a large <tt>H1</tt> heading has a larger controller icon than a tiny <tt>H5</tt> heading.</p>

<p>The value <tt>auto</tt> works only if the content is non-blank. Therefore we have <tt>content : \00A0</tt>, which is the Unicode number for a non-breaking space, which by definition is "non-blank".</p>

<p> The background attributes prepare the <tt>::before</tt> pseudo-element for a background image, which is defined with the next two CSS rules:</p>

<figcaption class="listing">Rules for the controller icon</figcaption>
<pre>
[cbc="expanded"]:before {
    background-image: url("orange-minus.svg") ;
    }
[cbc="collapsed"]:before {
    background-image : url("orange-plus.svg") ;
    }
</pre>

<p>Depending on the controller state, a circled plus or minus icon is shown. Of course, other shapes are possible if you like.</p>

<p>To hide the content of a collapsed block with a height of zero, we need this rule:</p>

<figcaption class="listing">Rules for the collapsible block</figcaption>
<pre>
[cbc]+div {
    overflow-y : hidden ;
    margin-left: -30px ;
    padding-left : 30px ;
    }
</pre>

<p>The overflow rule hides the text content that flows down below the bottom border of the <tt>DIV</tt> element. Padding and margin on the left side were chosen so that the text remains at the original horizontal position, while leaving enough space on the left side for the controller icon of nested subsections. Subsections, similar to a book, are not indented.</p>

<p>The next rule makes collapsed headings stand closer to each other, which gives a better overview over the document structure:</p>

<figcaption class="listing">Shrink vertical distance between collapsed controllers</figcaption>
<pre>
[cbc="collapsed"] + div + [cbc] {
    margin-top: 0px ;
    }
</pre>

<p>Then we need some code. To collapse a block, the following code is called:</p>

<figcaption class="listing">Collapsing a block</figcaption>
<pre>
function collapse( controller ) {
    controller.synesis.collapsibleBlocks.forEach ( block => {
        block.style.height = block.scrollHeight + "px" ;
        window.requestAnimationFrame ( (function( ) {
            this.style.height = "0px" }).bind( block )) ;
        ) }
    controller.setAttribute( "cbc", "collapsed" );
    }
</pre>

<p>A controller object maintains a list of collapsible blocks. Usually there is only one block, but there are exceptions. The goal is to set <tt>block.style.height="0px"</tt>. But this cannot be done rightaway, because a transition effect needs numerical values for both start and end values. And an expanded block has <tt>block.style.height="auto"</tt>, which is non-numerical. This must be replaced by the numerical value obtained from <tt>block.scrollHeight</tt>. This property always returns the height of the entire text content. But this is only one half of the story: We cannot simply set the block height to some value and then set it to zero with the next instruction. The numerical height value must first be passed to the rendering engine to give it a chance to update the DOM tree properly, before the new value <tt>0px</tt> can be set. This must be done in a new "animation frame". Therefore we call <tt>window.requestAnimationFrame</tt> and pass it a function to be executed. The function body executes <tt>block.style.height="0px"</tt> a tiny moment later.</p>

<p>But there is another problem to solve: The animation frame request is executed in a loop, setting the <tt>block</tt> variable to different values in each turn. But the callback functions, executed at some later time, must use a reference to each individual <em>block instance</em>, not the value of the <tt>block</tt> variable set in the last loop turn. Therefore we have the mysterious <tt><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">bind</a></tt> function call chained to the callback function expression. It creates a new instance of the funcion each time and "binds" the invisible first parameter "this" to the current value of <tt>block</tt>. That indeed does the trick for multiple collapsible blocks.</p>

<p>When everything is prepared, the controller state is set to "collapsed".</p>

<p>The same recipe must be applied for block expansion. The first problem here is to determine the correct height of the block in the expanded state. We <em>could</em> use <tt>block.scrollHeight</tt> directly; this works in most instances, but there are exceptions when it fails (expanding the navigation pane to width is one example). Therefore we need an intermediate step and set <tt>block.style.height="auto"</tt>. Now <tt>scrollHeight</tt> returns the correct value, which is stored in a temporary variable, because, you guessed it, we cannot set the block height rightaway at this point. We have to set <tt>block.style.height="0px"</tt> first in order to start the transition with a numerical value.</p>

<figcaption class="listing">Expanding a block</figcaption>
<pre>
function expand( controller ) {
    controller.synesis.collapsibleBlocks.forEach ( block => {
        block.style.height = "auto" ;
        const height = block.scrollHeight + "px" ;
        block.style.height = "0px" ;
        window.requestAnimationFrame (( function( ) { this.style.height = height } ).bind( block )) ;
        } )
    controller.setAttribute( "cbc", "expanded" );
    }
</pre>

<p>Then we can request a new animation frame from the window object and set the correct height value in a callback function. Again, we must bind the current value of <tt>block</tt> to a function parameter.</p>

<p>The <tt>collapsible-5</tt> module has a function that must be called to prepare the document &ndash; <tt>initPage</tt>:</p>

<figcaption class="listing">Expanding a block</figcaption>
<pre>
export function initPage ( container ) {
    initCollapsibleULtrees( container );
    initCollapsibleDLtrees( container );
    initCollapsibleChapters( container );
    }
</pre>

<p>Currently, three types of structures are supported, collapsible trees based on unordered lists (UL), collapsible description lists (DL), and collapsible chapters or document sections, a heading element (Hn) followed by a DIV element. The steps are pretty much the same, except for some details.</p>

<p>Let's have a look at collapsible chapters:</p>

<figcaption class="listing">Collapsible document sections</figcaption>
<pre>
function initCollapsibleChapters ( container = document ) {
        <cc>// Find all block controllers</cc>
        <cc>// All heading elements with a cbc attribute</cc>
    const controllers = container.querySelectorAll( "h1[cbc],h2[cbc],h3[cbc],h4[cbc],h5[cbc]" ) ;  
    for ( let i = 0 ; i &lt; controllers.length ; i ++ ) {
        const controller = controllers[ i ];
            <cc>// Set initial controller state if necessary.</cc>
        let controllerState = getInitialControllerState( controller );
        controller.setAttribute( "cbc", controllerState );	
        controller.addEventListener( "click", iconClickHandler );
        controller.style.transition = controllerTransitionStyle ;
            <cc>// Register collapsible block with block controller.</cc>
        const block = controller.nextElementSibling ;  <cc>// usually a DIV element</cc>
        if ( ! controller.synesis ) controller.synesis = { } ;
        controller.synesis.collapsibleBlocks = [ block ]; 
            <cc>// Initialize inline styles.</cc>
        block.style.transition = blockTransitionStyle;
        block.style.height = controllerState === "collapsed" ? "0px" : "auto" ;
        block.addEventListener( "transitionend", transitionEndHandler );
    }	}
</pre>

<p>The code determines the initial controller state, which can be given explicitly (<tt>cbc="expanded"</tt>), in a default value attribute in a parent container (<tt>cbc-default="collapsed"</tt>) or in an url parameter (<tt>document.htm?cbc-override="expanded"</tt>). The last option comes in handy for page authors while writing content. But if a parent container carries the attribute <tt>cbc-no-override</tt>, the url override value is ignored. This is useful for the table-of-contents document, which is generally expected to appear as compact as possible.</p>

<p>Then the click event handler is registered with the controller element, and a transition style is set. This is necessary for heading elements, because their two vertical margins collapse into one if the <tt>DIV</tt> element between them disappears. Without a transition rule, the lower heading element would jump abruptly up and down when the controller above changes its state. </p>

<p>The next step creates references from the controller element to the controlled collapsible block elements. This is one of the parts that varies among different structure types.</p>

<p>Then the block transition style is set to ensure a smooth height change over time. The block style height is set explicitly. A CSS rule can determine the value, but the code expects the element style value to be set explicitly. And finally, a transition end event listener is registered with the block element. Here is the code:</p>

<figcaption class="listing">Expanding a block</figcaption>
<pre>
function transitionEndHandler ( evt ) { 
    if ( evt.target.style.height !== "0px" ) evt.target.style.height = "auto" ;
    evt.preventDefault();
    evt.stopPropagation( );
    }
</pre>

<p>It purpose is to set the block height style to "auto" once the block was expanded to full height. This is necessary, because layout changes might have an effect on the actual block height.</p>

<p>One last word about transition styles. They are usually defined in CSS files, but in this implementation they are set by script code. And there's a reason for it: When a document is loaded in a browser, it should appear in its initial state as quick as possible, without animations. Additionally, the initialization logic may change a controller state here and there when the page content has already been rendered on the screen. To avoid undesired movements on the screen, the transition rules are set as late as possible.</p>

<p>The following example should demonstrate "goal achieved":</p>

<figcaption class="example">Collapsible document structures (<a href="collapsible-5-02.htm">collapsible-5-02.htm</a>):</figcaption>
<iframe src="collapsible-5-02.htm"></iframe>

<!-- h2 --></div>

<h2 cbc>Nested Document Chapters</h2><div>

<p>The following example demonstrates correctly nested document sections (chapters) of various degree. Lower order sections (with higher numbers) are placed inside the collabsible block of higher order sections. For example, H3 sections are always enclosed in H2 collapsible blocks, and H4 sections are enclosed in H3 blocks:</p>

<figcaption class="example">Nested document structures (<a href="collapsible-5-03.htm">collapsible-5-03.htm</a>):</figcaption>
<iframe src="collapsible-5-03.htm"></iframe>

<!-- h3 --></div>

<h2 cbc>Collapsible Tree Based on Unordered Lists</h2><div>

<p>The next example shows a collapsible tree based on unordered list elements:</p>

<figcaption class="example">Collapbsible tree structure (<a href="collapsible-5-04.htm">collapsible-5-04.htm</a>):</figcaption>
<iframe src="collapsible-5-04.htm" style="height:150px"></iframe>

<p>The root UL element is decorated with a <tt>class="collapsible"</tt>. The advantage of a collapsible tree is that you don't have to decorate each nested controller element (LI) with a <tt>cbc</tt> attribute, because a collapsible block controller is automatically recognizable by having a nested UL child. The init code in the script takes care of that:</p>

<figcaption class="listing">Collapsible Tree</figcaption>
<pre>
&lt;ol <hi>class="collapsible"</hi> cbc-default="collapsed"&gt;
&lt;li&gt;Simple list item&lt;/li&gt;
&lt;li&gt;Simple list item&lt;/li&gt;
&lt;li&gt;collapsible list item
    &lt;ol&gt;
    &lt;li&gt;nested simple list item&lt;/li&gt;
    &lt;li&gt;nested simple list item&lt;/li&gt;
    &lt;/ol&gt;&lt;/li&gt;
&lt;/ol
</pre>

<p>Then we need some additional CSS that builds upon the rules defined above. Firstly, the root element needs some padding on the left to make room for the control icons. A line height of 150% provides some air between the lines.</p>

<figcaption class="listing">Line spacing and space for the control icons on the left</figcaption>
<pre>
ul.collapsible {
    line-height : 150% ;
    padding-left : 25px ;
    }
</pre>

<p>List items have no bullets. Instead, the control icons are provided by the <tt>::before</tt> pseudo-elements as described above.</p>

<figcaption class="listing">Suppressing bullets for list items</figcaption>
<pre>
ul.collapsible li {
    list-style-type : none ;
    }
</pre>

<p>Spacing and icon position are a little bit different:</p>

<figcaption class="listing">Space for control icons and indentation</figcaption>
<pre>
ul.collapsible li::before {
    background-position-x : 0px ;
    margin-left : -25px ;
    width : 25px ;
    }
</pre>

<p>Nested ULs are considered collapsible blocks, controlled by their parent list item. Their vertical overflow must be hidden. Additionally, we need some margin and padding on the left side to adjust indenting and space for the control icons.</p>

<figcaption class="listing">Hiding vertical overflow, space and indentation</figcaption>
<pre>
ul.collapsible ul {
    overflow-y : hidden ;
    margin-left : -10px ;
    padding-left : 25px ;
    }
</pre>

<p>Finally, a default value of "collapsed" in a parent container sets the collabsible block height to zero by default. This avoid visual noise when the document is loaded and rendered on the screen.</p>

<figcaption class="listing">Default state for collapsible blocks</figcaption>
<pre>
[cbc-default="collapsed"] ul {
    height : 0px ;
    }
</pre>

<!-- h3 --></div>

<h2 cbc>Collapsible Tree Based on Simple Ordered Lists</h2><div>

<p>The variant below applies the <tt>collapsible</tt> class name on ordered lists (OL). To make that work, the init code for collapsible trees must collect UL as well as OL elements:</p>

<figcaption class="listing">Selecting UL and OL elements</figcaption>
<pre>
const blocks = tree.querySelectorAll( "<hi>UL,OL</hi>" ); <cc>// all nested lists</cc>
</pre>

<p>Here is an example:</p>

<figcaption class="example">Collapbsible tree with simple ordered lists (<a href="collapsible-5-05.htm">collapsible-5-05.htm</a>):</figcaption>
<iframe src="collapsible-5-05.htm" style="height:150px"></iframe>

<p>A look into the DOM shows what has to be styled for the controller icon:</p>

<figcaption class="image">::before and ::marker pseudo elements</figcaption>
<div class="imgbox"><img src="fig-001.png" height="100" /></div>

<p>The <tt>::marker</tt> pseudo-element carries the list item number, the ::before carries the control icon. The following images show how they are positioned:</p>

<figcaption class="image">::before and ::marker pseudo elements</figcaption>
<div class="imgbox"><img src="fig-002.png" height="150" /></div>

<figcaption class="image">::before and ::marker pseudo elements</figcaption>
<div class="imgbox" ><img src="fig-003.png" height="150" /></div>

<p>We must make the <tt>::before</tt> element wide enough to span both control icon and list item number. The left margin is set to the the same amount, but negative. This moves the control icon to the left of the list item number, while the item text remains in its original horizontal position.</p>

<p>In general, the techniques are the same as for UL trees as described abover. Only values are somewhat different. Especially the <tt>::before</tt> element is wider:</p>

<figcaption class="listing">CSS rules for collapsible ordered lists</figcaption>
<pre>
ol.collapsible {
    line-height : 150% ;
    margin-left : 17px ;
    padding-left : 25px ;
    }
ol.collapsible li::before {
    background-position-x : 0px ;
    width : 40px ;
    margin-left : -40px ;
    }
ol.collapsible ol {
    overflow-y : hidden ;
    margin-left : -20px ;
    }
[cbc-default="collapsed"] ol {
    height : 0px ;
    }
</pre>

<!-- h3 --></div>

<h2 cbc>Collapbsible Nested Ordered Lists</h2><div>

<p>Nested ordered lists can be easily obtained with some CSS rules:</p>

<figcaption class="listing">CSS rules for nested ordered lists</figcaption>
<pre>
ol.instructions, ol.instructions ol { 
    list-style-type : none ; 
    counter-reset : instruction-counter 
    }
ol.instructions li:before {
    counter-increment : instruction-counter ; 
    content : counters(instruction-counter, ".") ;
    }
</pre>

<p>The <tt>counter-reset</tt> instruction introduces a counter variable named "instruction-counter" on <tt>OL</tt> elements with the class name <tt>instructions</tt>. The <tt>counters()</tt> function call gathers the values of <tt>instruction-counters</tt> of <tt>OL</tt> parents and concatenates them with a point in between. This automatically gives nice numbers like 4.3.7 whithout manual numbering.</p>

<p>To make a nested ordered list collapsible, we combine both class names:</p>

<figcaption class="listing">HTML code for collapsible nested ordered lists</figcaption>
<pre>
&lt;ol class="<hi>collapsible instructions</hi>"&gt;
    &hellip;
    &lt;/ol&gt;
</pre>

<p>For the layout, we have to account for more space for concatenated numbers in nested lists in the CSS code. Here is a working demo:</p>

<figcaption class="example">Collapbsible tree with simple ordered lists (<a href="collapsible-5-07.htm">collapsible-5-07.htm</a>):</figcaption>
<iframe src="collapsible-5-07.htm" style="height:150px"></iframe>

<p>The CSS code is very simple, because most rules are inherited from the <tt>collapsible</tt> class:</p>

<figcaption class="listing">CSS rules for nested ordered lists</figcaption>
<pre>
ol.collapsible.instructions {
    margin-left : 2px ;
    }
ol.collapsible.instructions li::before {
    width : auto ;
    margin-left : -25px ;
    padding-left: 25px;
    }
</pre>

<p>Interestingly, <tt>width:auto</tt> setting works well in this context.</p>

<!-- h3 --></div>

<h2 cbc>Collapsible Description Lists</h2><div>

<p>The following example shows a collapsible description list:</p>

<figcaption class="example">Collapbsible description list (<a href="collapsible-5-06.htm">collapsible-5-06.htm</a>):</figcaption>
<iframe src="collapsible-5-06.htm" style="height:150px"></iframe>

<p>Here we can see how multiple collapsible DD blocks are controlled by a single DT controller. Note that collapsible DLs can be nested, but they are not collapsible by default. They must be decorated with <tt>class="collapsible"</tt> individually.</p>

<p>Margins and paddings on the left side had to be adjusted to make the text and icon appear where they are expected to be:</p>

<figcaption class="listing">CSS code for collapsible description lists</figcaption>
<pre>
dl.collapsible {
    line-height : 150% ;
    }
dl.collapsible > dt {
    margin-left : 25px ;
    }
dl.collapsible > dd {
    overflow-y : hidden ;
    margin-left : -10px ;
    padding-left : 25px ;
    }
dd > dl.collapsible {
    margin-top : 0px ;
    margin-bottom : 0px ;
    }
</pre>

<p>The rest is inherited from the <tt>collapsible</tt> rules, defined above.</p>

<!-- h3 --></div>


</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js"></script></body></html>