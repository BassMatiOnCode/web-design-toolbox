<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm"version="2022-01-17" editor-name="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-01-20" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-01-20" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Web Design > Toolbox > Tables" />
<meta name="tags" content="web, design, toolbox, table, sticky, header" />
<meta name="description" content="The CSS attribute <tt>display:sticky</tt> can be applied to table cells, which opens some interesting opportunities for sticky table header rows and columns." />

<link rel="stylesheet" href="/inc/page.css" />
 <style>
 figcaption+iframe {
     background-color : white ;
     border : 1px solid #BBB ;
     }
 </style>
<title>Web Design - Sticky Table Headers</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>Sticky Table Headers</h1>

<p id="page-abstract"></p>

<p>An element can have the style <tt>position : sticky</tt> and a position (top, bottom, left, right), which imposes a limit for scrolling. For example, a toolbar may scroll up until it reaches the top of the browser window:</p>

<figcaption class="listing">A sticky toolbar</figcaption>
<pre>
#main-toolbar {
    position : sticky ;
    top : 0px ;
    }
</pre>

<p>The sticky element must be positioned in a positioned container. This can be the browser window, or a div with <tt>position:relative</tt> or equivalent. If the container is smaller than the content, it should show scrollbars:</p>

<figcaption class="listing">Container styles</figcaption>
<pre>
div.table-container {
    position : relative ;
    overflow : auto ;
    }
</pre>

<p>Then we can place the table inside the container:</p>

<figcaption class="listing">Container structure</figcaption>
<pre>
&lt;div class="table-container" style="max-width:100% ; height:300px"&gt;
&lt;table class="sticky-headers"&gt;
&hellip;
&lt;/table&gt;
&lt;/div&gt;
</pre>

<h2 cbc>A Sticky Header Row</h2><div>

<p>The table structure:</p>

<pre>
&lt;table class="flat-borders sticky-headers"&gt;&lt;thead&gt;&lt;tr&gt;
    &lt;th&gt;Header 1&lt;/th&gt;
    &hellip;
    &lt;th&gt;Header 9&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Row 1&lt;/th&gt;
    &lt;td&gt;Column 2&lt;/td&gt;
    &hellip;
    &lt;td&gt;Column 9&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;
    &hellip;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
</pre>

<p>We are going to make the cells in the <tt>thead</tt> row sticky. A point to remember is that only TD and TH elements can be made sticky. There is no effect on TR or COL elements. So lets design the style rule:</p>

<figcaption class="listing">Rules for a sticky header row</figcaption>
<pre>
table.sticky-headers :first-child :first-child * {
    position : sticky ;
    top : 0px ;
    background-color : white ;
    }
</pre>

<p>The background color is required to prevent data cells from shining through when they are scrolled up.</p>

<p>An <tt>iframe</tt> element provides the container for the table. The <tt>iframe</tt> has borders, so we don't need them on the cells in the first row and first column:</p>

<figcaption class="listing">The outer border lines are provided by the container</figcaption>
<pre>
table.sticky-headers :first-child :first-child * {
    border-top-style : none ;
    }
table.sticky-headers tr :first-child {
    border-left-style : none ;
    }
</pre>

<figcaption class="example">A table with a sticky header row</figcaption>
<iframe src="sticky-headers-01.htm"></iframe>

<!-- h2 --></div>

<h2 cbc>Sticky Row Headers</h2><div>

<p>To obtain a sticky first column, we follow the same strategy as before: The first cell in a row gets the attributes <tt>position:sticky</tt>, <tt>left:0px</tt> and <tt>background-color:white</tt>. Additionally, we must increment the z-index of the cell in the upper left corner so that it remains visible if the table is scrolled to the left side:</p>

<figcaption class="listing">Making the first colum sticky</figcaption>
<pre>
table.sticky-headers tr :first-child {
	position : sticky ;
	left : 0px ;
	background-color : white ;
	}
table.sticky-headers :first-child :first-child :first-child {
	z-index : 1 ;
	}
</pre>

<p>Here is a demo:</p>

<figcaption class="example">Adding a sticky header column</figcaption>
<iframe src="sticky-headers-02.htm"></iframe>

<!-- h2 --></div>

<h2 cbc>Sticky Row-Group Headers</h2><div>

<p>You may have noticed the row group headers in the table:</p>

<figcaption class="listing">A row-group header</figcaption>
<pre>
    &hellip;
    &lt;td&gt;Column 9&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;<hi>&lt;thead&gt;</hi>&lt;tr&gt;
    &lt;th colspan="1"&gt;Group 2&lt;/th&gt;
    &lt;td colspan="9"&gt;&lt;/td&gt;
&lt;/tr&gt;<hi>&lt;/thead&gt;</hi>&lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Row 1&lt;/th&gt;
    &hellip;
</pre>

<p>Now we are going to make them sticky in this section.</p>

<figcaption class="listing">Making sticky row-group headers</figcaption>
<pre>
table.sticky-headers thead:not(:first-child) tr * {
    position : sticky ;
    top : 28px ;
    background-color : white ;
    z-index : 1 ;
    border-top-style : solid ;
    }
table.sticky-headers thead:not(:first-child) th {
    z-index : 2 ;
    overflow : visible ;
    max-width : 60px ;
    border-right-style : none ;
    }
</pre>

<p>The first rule selects all cells in a <tt>thead</tt> element exept the first, which serves as column header row and has already been handled above. <tt>Position</tt> is set <tt>sticky</tt> as before, but this time the <tt>top</tt> was chosen to keep the (first) column header row visible. The <tt>z-index</tt> was chosen to be 1 so that the <tt>td</tt> cells can slide underneath when the table is scrolled up.</p>

<p>The second rule selects the <tt>th</tt> header cells and sets their <tt>z-index</tt> to 2 so that the <tt>td</tt> cells in the same row can slide underneath when the table is scrolled to the left side.</p>

<p>Unfortunately, a top border must be set  to help to discern two row-group headers, but here rounding errors in the browser layout engines of Chrome and Edge cause their top position to be slightly different, which causes slightly thicker horizontal border lines. As an alternative, a different background color could be chosen.</p>

<p>The next thing to note is that the width of the first column is dominated by the usually longer captions of row groups, which is usually not what we want. To address that, we must set a defined width for the first column, and make the <tt>th</tt> cell text overflow to the right.</p>

<figcaption class="example">Adding a sticky row-group headers</figcaption>
<iframe src="sticky-headers-03.htm"></iframe>

<!-- h2 --></div>

<h2 cbc>Collapsible Table Row-Groups</h2><div>

<p>Row-group headers are excellent candidates for collapsible-block controllers:</p>

<figcaption class="listing">A collapsible row-group controller</figcaption>
<pre>
<hi>&lt;thead collapsible&gt;</hi>&lt;tr&gt;
    &lt;th colspan="1"&gt;Group 1 : The first group of rows&lt;/th&gt;
    &lt;td colspan="9"&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/thead&gt;<hi>&lt;tbody&gt;</hi>&lt;tr&gt;
    &hellip;
&lt;/tr&gt;&lt;/tbody&gt;
</pre>

<p>A click on a row-group header cell toggles the visibility of the related table rows.</p>

<p>Let's have a look at the CSS first.</p>

<figcaption class="listing">CSS rules for collapsible row-groups</figcaption>
<pre>
table.sticky-headers thead[collapsible] th:first-child {
    background-image : url( "/inc/collapsible/orange-minus.svg" );
    background-position : 5px center ;
    background-repeat : no-repeat ;
    padding-left : 35px ;
    }
</pre>

<p>A <tt>THEAD</tt> element with a <tt>collapsible</tt> attribute causes the row header cell (<tt>TH</tt>) to be decorated with a circled minus background image. Some padding at the left side ensures that there is enough room for the image.</p>

<p>A controller in the <tt>collapsed</tt> state has a different background image, and the related table body element will not be rendered:</p>

<figcaption class="listing">A different image for a collapsed row-group</figcaption>
<pre>
table.sticky-headers thead[collapsed] th:first-child {
    background-image : url( "/inc/collapsible/orange-plus.svg" );
    }
table.sticky-headers thead[collapsed]+tbody {
    display : none ;
    }
</pre>

<p>To make that work, we need some scripting. First, the event handler:</p>

<figcaption class="listing">The click event handler</figcaption>
<pre>
function theadClick ( evt = window.event ) { 
    evt.stopPropagation( );
    evt.preventDefault( );
    this.toggleAttribute( "collapsed" );
    }
</pre>

<p>Essentially, the event handler toggles the <tt>collapsed</tt> attribute on the <tt>THEAD</tt> element.</p>

<p>This event handler must be registered with the collapsible block controllers:</p>

<figcaption class="listing">The init code</figcaption>
<pre>
function initPage ( ) {
    const controllers = document.querySelectorAll ( "thead[collapsible]" );
    for ( let i = 0 ; i < controllers.length ; i ++ ) {
        controllers[ i ].addEventListener( "click", function ( evt = window.event ) { 
    }
</pre>

<p>This function must be called when the document  has been loaded.</p>

<p>Here is a functional demo:</p>

<figcaption class="example">Collapsible Row-Groups</figcaption>
<iframe src="sticky-headers-04.htm"></iframe>

<!-- h2 --></div>

<h2 cbc>Conclusion</h2><div>

<p>The module is implemented in the <a href="/inc/collapsible/table-rowgroups-1.js">inc/collapsible/table-rowgroups-1.js</a> and <a href="inc/collapsible/table-rowgroups-1.css">inc/collapsible/table-rowgroups-1.css</a> files.</p>

<!-- h2 --></div>



</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>