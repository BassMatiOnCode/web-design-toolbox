<!DOCTYPE html>
<html lang="en-US"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="template-info" file-name="empty.htm"version="2022-01-17" editor-name="USP" />
<meta name="author" content="USP" />
<meta name="creation-date" content="2022-01-20" />
<meta name="editor" content="USP" />
<meta name="change-date" content="2022-01-20" />
<meta name="version" content="1" />
<meta name="categories" content="Programming > Web Design > Toolbox > Tables" />
<meta name="tags" content="web, design, toolbox, table, sticky, header" />
<meta name="description" content="The CSS attribute <tt>display:sticky</tt> can be applied to table cells, which opens some interesting opportunities for sticky table header rows and columns." />

<link rel="stylesheet" href="/inc/page.css" />
 
<title>Web Design - Sticky Table Headers</title>

</head><body><header id="page-header"></header><div id="main-toolbar"></div><main id="page-content">

<h1>Sticky Table Headers</h1>

<p id="page-abstract"></p>

<p>An element can have the style <tt>position : sticky</tt> and a position (top, bottom, left, right) which indicates the limit for scrolling. For example, a toolbar at the top of the page might have <tt>top : 0px</tt>. If the page is scrolled down, the content moves up, but the toolbar stops moving when it reaches the top. For this to work, the sticky element must be positioned in a positioned container (<tt>position:relative</tt> or equivalent):</p>

<figcaption class="listing">Container structure</figcaption>
<pre>
&lt;div style="position:relative ; max-width:100% ; height:300px"&gt;
&lt;table class="sticky-headers"&gt;
&hellip;
&lt;/table&gt;
&lt;/div&gt;
</pre>

<p>But note that if the sticky element is <em>larger</em> than its container, the position attribute is ignored. The idea is that content access has priority over stickyness. As we will see, this limits the usefulness of the <tt>sticky</tt> attribute for HTML tables.</p>

<p>The next point to note is that only TD and TH elements can be made sticky. It doesn't work for TR or COL elements.</p>

<h2 cbc>Z-Index Planning</h2><div>

<p>The next important ingredient is the <tt>z-index</tt>: Non-sticky elements must "slide under" the sticky element when scrolled. This means that the sticky element's z-index must be larger by at least one. Let's begin with a simple example, a table with a sticky header column. If the header cells in the first row are styled as </p>

<figcaption class="listing">CSS for a sticky header column</figcaption>
<pre>
table.sticky-headers thead:first-child th {
	position : sticky ;
	z-index : 1 ;
	top : 0px ;
	}
</pre>

<p>&hellip; the first row will remain in position when the table is scrolled.</p>

<p>If we want a sticky header row at the top and a sticky header column at the left side), we need at least 4 z-index values: 0 for the table data cells, 1 for the row headers, 2 for the column headers, and 3 for the cell in the upper left corner:</p>

<figcaption class="listing">CSS for a sticky header column</figcaption>
<pre>
table.sticky-headers thead:first-child th {
	position : sticky ;
	z-index : 2 ;
	top : 0px ;
	}
table.sticky-headers tbody th:first-child {
	position : sticky ;
	z-index : 1 ;
	left : 0px ;
	}
table.sticky-headers thead:first-child th:first-child {
	z-index : 3 ;
	}
table
</pre>

<!-- h2 --></div>

<h2 cbc>Secondary Header Rows</h2><div>

<p>Secondary header rows can structurize a table in the vertical direction. They usually consist of a single field which spans over all table columns, like so:</p>

<figcaption class="listing">Secondary header rows</figcaption>
<pre>&lt;div class="table-container"&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
    &lt;th&gt;Column 1&lt;/th&gt;
    &lt;th&gt;Column 2&lt;/th&gt;
    &lt;th&gt;Column 3&lt;/th&gt;
    &lt;th&gt;Column 4&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Row 1&lt;/th&gt;
    &lt;td&gt;Data 12&lt;/td&gt;
    &lt;td&gt;Data 13&lt;/td&gt;
    &lt;td&gt;Data 14&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;<hi>&lt;thead&gt;</hi>&lt;tr&gt;
    &lt;th colspan="4"&gt;Secodary header row&lt;/th&gt;
&lt;/tr&gt;<hi>&lt;/thead&gt;</hi>&lt;tbody&gt;&lt;tr&gt;
    &lt;th&gt;Row 2&lt;/th&gt;
    &lt;td&gt;Data 22&lt;/td&gt;
    &lt;td&gt;Data 23&lt;/td&gt;
    &lt;td&gt;Data 24&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
</pre>

<p>If the first column contains row headers and thus is made sticky, we have a problem: The section header TH, although in the first table column is not at all sticky... When the content is scrolled to the left, the secondary header field is pushed out to the left. It seems that it is more important that the entire content can be accessed with scrolling than having the rowheader cell stick to the left side of the container box. So, what can we do?</p>

<p>Approach 1: Add one or more empty TH cells, remove their borders and make column 1 TH content overflow into these cell(s). Works well, until the secondary header row is made sticky to the top. Another drawback: If the first TH cell in the row does not span multiple columns, its content contributes to the calculation of the width of the first table column. Another drawback: Overflowing content has no background and can not cover other content.</p>

<p>Approach 2: Give the first TH cell a colspan that a) fits the content and b) does not cause it to be shifted out to the left. Then add an empty TD cell that spans the rest of the columns. Its z-index must be lower than that of the preceding TH cell.</p>

<!-- h2 --></div>

</main><footer id="page-footer"></footer><script type="module" src="/inc/page.js" ></script></body></html>